{"ast":null,"code":"var _jsxFileName = \"/Users/huixiandeng/Desktop/VScode/react/exercise/41.8react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows = 6,\n  ncols = 6,\n  chanceLightStartsOn = 0.3\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let i = 0; i < nrows; i++) {\n      let arr = [];\n      for (let j = 0; j < ncols; j++) {\n        arr.push(Math.random() > chanceLightStartsOn);\n      }\n      initialBoard.push(arr);\n    }\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < i.length; j++) {\n        if (i[j] === false) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  // TODO\n  function victory() {\n    if (hasWon()) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\\"Congrats, you win!\\\"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this);\n    }\n  }\n  // make table board\n\n  // TODO\n\n  function makeHtmlBoard() {\n    let tableBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        let coord = `${y} - ${x}`;\n        row.push( /*#__PURE__*/_jsxDEV(Cell, {\n          flipCellsAroundMe: coord,\n          isLit: board[y][x]\n        }, coord, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 18\n        }, this));\n      }\n      tableBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row\n      }, y, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 23\n      }, this));\n    }\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tableBoard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","i","arr","j","push","Math","random","hasWon","length","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","victory","children","fileName","_jsxFileName","lineNumber","columnNumber","makeHtmlBoard","tableBoard","row","flipCellsAroundMe","isLit","_c","$RefreshReg$"],"sources":["/Users/huixiandeng/Desktop/VScode/react/exercise/41.8react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 6, ncols = 6, chanceLightStartsOn = 0.3 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for(let i = 0; i < nrows; i++) {\n      let arr = [];\n      for(let j = 0; j < ncols; j++) {\n        arr.push((Math.random() > chanceLightStartsOn))\n      }\n      initialBoard.push(arr)\n    }\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    for(let i = 0; i < board.length; i++) {\n      for(let j = 0; j < i.length; j++){\n        if(i[j] === false){\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n   // TODO\n  function victory() {\n    if(hasWon()) {\n      return (\n        <div>\n          \"Congrats, you win!\"\n        </div>\n      )\n    }\n  }\n  // make table board\n\n  // TODO\n\n  function makeHtmlBoard() {\n    let tableBoard = [];\n    for(let y = 0; y < nrows; y++) {\n      let row = [];\n      for(let x = 0; x < ncols; x++) {\n        let coord = `${y} - ${x}`;\n        row.push(<Cell \n          key={coord}\n          flipCellsAroundMe={coord}\n          isLit={board[y][x]}\n          />)\n      }\n      tableBoard.push(<tr key={y}>{row}</tr>)\n    }\n\n    return (\n      <table>\n        <tbody>{tableBoard}</tbody>\n      </table>\n    )\n\n  }\n}\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}