{"ast":null,"code":"var _jsxFileName = \"/Users/huixiandeng/Desktop/VScode/react/exercise/41.8react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows = 6,\n  ncols = 6,\n  chanceLightStartsOn = 0.3\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let i = 0; i < nrows; i++) {\n      let arr = [];\n      for (let j = 0; j < ncols; j++) {\n        arr.push(Math.random() > chanceLightStartsOn);\n      }\n      initialBoard.push(arr);\n    }\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < i.length; j++) {\n        return !board[i][j];\n      }\n    }\n    // return true;\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number); // what is Number ?\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n\n      // TODO: return the copy\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  // TODO\n\n  //  function victory () {  // if i make it a function, how to use it ?\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\\"Congrats, you win!\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this);\n  }\n  //  }\n\n  // make table board\n\n  // TODO\n\n  // function makeHtmlBoard() {  // same as above question\n  let tableBoard = [];\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y} - ${x}`;\n      row.push( /*#__PURE__*/_jsxDEV(Cell, {\n        flipCellsAroundMe: () => flipCellsAround(coord),\n        isLit: board[y][x]\n      }, coord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 18\n      }, this));\n    }\n    tableBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, y, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 23\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: tableBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 7\n  }, this);\n\n  // }\n  mak;\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","i","arr","j","push","Math","random","hasWon","length","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","row","children","fileName","_jsxFileName","lineNumber","columnNumber","tableBoard","flipCellsAroundMe","isLit","className","mak","_c","$RefreshReg$"],"sources":["/Users/huixiandeng/Desktop/VScode/react/exercise/41.8react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 6, ncols = 6, chanceLightStartsOn = 0.3 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for(let i = 0; i < nrows; i++) {\n      let arr = [];\n      for(let j = 0; j < ncols; j++) {\n        arr.push((Math.random() > chanceLightStartsOn))\n      }\n      initialBoard.push(arr)\n    }\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    for(let i = 0; i < board.length; i++) {\n      for(let j = 0; j < i.length; j++){\n       return(!board[i][j])\n      }\n    }\n    // return true;\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);  // what is Number ?\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const boardCopy = oldBoard.map(row => ([...row]))\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y,x,boardCopy);\n      flipCell(y-1,x,boardCopy);\n      flipCell(y+1,x,boardCopy);\n      flipCell(y,x-1,boardCopy);\n      flipCell(y,x+1,boardCopy);\n\n      // TODO: return the copy\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n   // TODO\n \n  //  function victory () {  // if i make it a function, how to use it ?\n     if(hasWon()) {\n      return (\n        <div>\n          \"Congrats, you win!\"\n        </div>\n      )\n    }\n  //  }\n   \n\n  // make table board\n\n  // TODO\n\n  // function makeHtmlBoard() {  // same as above question\n    let tableBoard = [];\n    for(let y = 0; y < nrows; y++) {\n      let row = [];\n      for(let x = 0; x < ncols; x++) {\n        let coord = `${y} - ${x}`;\n        row.push(<Cell \n          key={coord}\n          flipCellsAroundMe={() => flipCellsAround(coord)}\n          isLit={board[y][x]}\n          />)\n      }\n      tableBoard.push(<tr key={y}>{row}</tr>)\n    }\n\n    return (\n      <table className=\"Board\">\n        <tbody>{tableBoard}</tbody>\n      </table>\n    )\n\n  // }\n  mak\n}\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}